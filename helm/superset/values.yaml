additionalAptPackages: {}
affinity: {}
configFromSecret: '{{ template "superset.fullname" . }}-config'
configMountPath: /app/pythonpath
configOverrides:
  ENABLE_TEMPLATE_PROCESSING: 'True'
envFromSecret: '{{ template "superset.fullname" . }}-env'
extraConfigMountPath: /app/configs
extraConfigs: {}
extraEnv: {}
extraSecretEnv: {}
extraSecrets: {}
image:
  pullPolicy: IfNotPresent
  repository: apache/superset
  tag: latest
ingress:
  annotations: {}
  enabled: true
  hosts:
    - superset.172.30.0.102.xip.io
  path: /
  tls: []
init:
  adminUser:
    email: admin@superset.com
    firstname: Superset
    lastname: Admin
    password: admin
    username: admin
  command:
    - /bin/sh
    - '-c'
    - >-
      . {{ .Values.configMountPath }}/superset_bootstrap.sh; . {{
      .Values.configMountPath }}/superset_init.sh
  enabled: true
  initContainers:
    - command:
        - /bin/sh
        - '-c'
        - >-
          until nc -zv $DB_HOST $DB_PORT -w1; do echo 'waiting for db'; sleep 1;
          done
      envFrom:
        - secretRef:
            name: '{{ tpl .Values.envFromSecret . }}'
      image: 'busybox:latest'
      imagePullPolicy: IfNotPresent
      name: wait-for-postgres
  initscript: |-
    #!/bin/sh
    echo "Upgrading DB schema..."
    superset db upgrade
    echo "Initializing roles..."
    superset init
    pip install mysqlclient
    pip install pymssql
    pip install psycopg2-binary
    pip install elasticsearch-dbapi
    pip install snowflake-sqlalchemy
    echo "Creating admin user..."
    superset fab create-admin \
                    --username {{ .Values.init.adminUser.username }} \
                    --firstname {{ .Values.init.adminUser.firstname }} \
                    --lastname {{ .Values.init.adminUser.lastname }} \
                    --email {{ .Values.init.adminUser.email }} \
                    --password {{ .Values.init.adminUser.password }} \
                    || true
    {{ if .Values.init.loadExamples }}
    echo "Loading examples..."
    superset load_examples
    {{- end }}
  loadExamples: false
nodeSelector: {}
postgresql:
  enabled: false
  existingSecret: postgresql
  existingSecretKey: postgresql-password
  persistence:
    accessModes:
      - ReadWriteOnce
    enabled: true
  postgresqlDatabase: superset
  postgresqlPassword: superset
  postgresqlUsername: superset
  service:
    port: 5432
redis:
  cluster:
    enabled: false
  enabled: false
  existingSecret: redis
  existingSecretKey: redis-password
  master:
    persistence:
      accessModes:
        - ReadWriteOnce
      enabled: true
  password: redis
  redisHost: redis-master
  usePassword: true
replicaCount: 1
resources: {}
service:
  annotations: {}
  loadBalancerIP: null
  port: 8088
  type: ClusterIP
supersetCeleryBeat:
  command:
    - /bin/sh
    - '-c'
    - >-
      . {{ .Values.configMountPath }}/superset_bootstrap.sh; celery beat
      --app=superset.tasks.celery_app:app --pidfile /tmp/celerybeat.pid
      --schedule /tmp/celerybeat-schedule
  enabled: false
  forceReload: false
  initContainers:
    - command:
        - /bin/sh
        - '-c'
        - >-
          until nc -zv $DB_HOST $DB_PORT -w1; do echo 'waiting for db'; sleep 1;
          done
      envFrom:
        - secretRef:
            name: '{{ tpl .Values.envFromSecret . }}'
      image: 'busybox:latest'
      imagePullPolicy: IfNotPresent
      name: wait-for-postgres
supersetNode:
  command:
    - /bin/sh
    - '-c'
    - >-
      . {{ .Values.configMountPath }}/superset_bootstrap.sh;
      /usr/bin/docker-entrypoint.sh
  connections:
    db_host: postgresql
    db_name: superset
    db_pass: superset
    db_port: '5432'
    db_user: superset
    redis_host: redis-master
    redis_port: '6379'
  forceReload: false
  initContainers:
    - command:
        - /bin/sh
        - '-c'
        - >-
          until nc -zv $DB_HOST $DB_PORT -w1; do echo 'waiting for db'; sleep 1;
          done
      envFrom:
        - secretRef:
            name: '{{ tpl .Values.envFromSecret . }}'
      image: 'busybox:latest'
      imagePullPolicy: IfNotPresent
      name: wait-for-postgres
supersetWorker:
  command:
    - /bin/sh
    - '-c'
    - >-
      . {{ .Values.configMountPath }}/superset_bootstrap.sh; celery
      --app=superset.tasks.celery_app:app worker
  forceReload: false
  initContainers:
    - command:
        - /bin/sh
        - '-c'
        - >-
          until nc -zv $DB_HOST $DB_PORT -w1; do echo 'waiting for db'; sleep 1;
          done
      envFrom:
        - secretRef:
            name: '{{ tpl .Values.envFromSecret . }}'
      image: 'busybox:latest'
      imagePullPolicy: IfNotPresent
      name: wait-for-postgres
tolerations: []